<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Controller가 호출하는 Interface의 위치를 namespace로 설정 -->
<mapper namespace = "com.edu.springboot.member.IMemberService">
	<select id="login"
		parameterType = "com.edu.springboot.member.MemberDTO"
		resultType = "com.edu.springboot.member.MemberDTO">
		SELECT * FROM member WHERE id = ? AND pass = ?;
	</select>	 
	
<!-- 	@Override -->
<!-- 	public int insert(MemberDTO memberDTO) { -->
<!-- 		/* -->
<!-- 		 INSERT, UPDATE, DELETE와 같이 행의 변화가 생기는 쿼리문은 -->
<!-- 		 update() 메서드를 사용한다. 쿼리 실행 후 적용된 행의 개수를 -->
<!-- 		 int형으로 반환한다. -->
<!-- 		 */ -->
<!-- 		int result = jdbcTemplate.update(new PreparedStatementCreator() { -->
<!-- 			/* -->
<!-- 			 PreparedStatementCreator 인터페이스로 익명클래스를 생성한 후 -->
<!-- 			 오버라이딩 된 메서드 내에서 쿼리문을 실행하고 결과를 반환한다. -->
<!-- 			 */ -->
<!-- 			@Override -->
<!-- 			public PreparedStatement createPreparedStatement(Connection con) throws SQLException { -->
<!-- 				/* -->
<!-- 				 인파라미터가 있는 INSERT 쿼리문의 실행을 위해 -->
<!-- 				 PreparedStatement 인스턴스를 생성한 후 인파라미털르 설정하고 -->
<!-- 				 쿼리문을 실행한다. -->
<!-- 				 */ -->
<!-- 				String sql = "INSERT INTO member (id, pass, name) " -->
<!-- 						+ " VALUES (?, ?, ?)"; -->
				
<!-- 				PreparedStatement psmt = con.prepareStatement(sql); -->
				
<!-- 				psmt.setString(1, memberDTO.getId()); -->
<!-- 				psmt.setString(2, memberDTO.getPass()); -->
<!-- 				psmt.setString(3, memberDTO.getName()); -->
				
<!-- 				return psmt; -->
<!-- 			} -->
<!-- 		}); -->
<!-- 		// INSERT문 실행 후 반환받은 결과는 Controller로 전달된다. -->
<!-- 		return result; -->
<!-- 	} -->

 </mapper>